#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>

#include "./node-free/helper.h"
#include "./node-free/keypos-36.h"

#define DEF 0
#define FN 1
#define SYM 2
#define NAV 3

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define ___ &trans

#define MOD_MORPH(NAME, NORMAL, MORPHED, MODS, KEEP_MODS) \
        NAME: morph_ ## NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            #binding-cells = <0>; \
            bindings = <NORMAL>, <MORPHED>; \
            mods = <MODS>; \
            keep-mods = <KEEP_MODS>; \
          };

// ---- combos ---- //
#undef COMBO_TERM
#define COMBO_TERM 50

ZMK_COMBO(underscore, &kp UNDERSCORE,    LT3 LT2, DEF)
ZMK_COMBO(minus,      &kp KP_MINUS,      LT2 LT1, DEF)
ZMK_COMBO(pound,      &kp POUND,         LM2 LT2, DEF)
ZMK_COMBO(dollar,     &kp DOLLAR,        LM1 LT1, DEF)

ZMK_COMBO(apostr,     &kp APOSTROPHE,    RT1 RT2, DEF)
ZMK_COMBO(dbl_quotes, &kp DOUBLE_QUOTES, RT2 RT3, DEF)

ZMK_COMBO(lbrack, &kp LBKT, RB1 RB2, DEF)
ZMK_COMBO(rbrack, &kp RBKT, RB2 RB3, DEF)
// ---------------- //

#define MAKE_HRM(NAME, TRIGGER_POS) \
        NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            flavor = "balanced"; \
            tapping-term-ms = <280>; \
            quick-tap-ms = <200>; \
            require-prior-idle-ms = <100>; \
            bindings = <&kp>, <&kp>; \
            hold-trigger-key-positions = <TRIGGER_POS>; \
            hold-trigger-on-release; \
        };

/ {
    behaviors {
        MAKE_HRM(hrm_l, KEYS_R THUMBS)
        MAKE_HRM(hrm_r, KEYS_L THUMBS)

        /delete-node/ grave_escape; // The compiler complains otherwise that gresc is already defined
        // NOTE: almost identical to the default gresc, but sends shift with the key to also have ~
        MOD_MORPH(gresc, &kp ESC, &kp GRAVE, (MOD_LGUI | MOD_LSFT | MOD_RGUI | MOD_RSFT), (MOD_RSFT | MOD_LSFT))
        MOD_MORPH(bspc_del, &kp BACKSPACE, &kp DELETE, (MOD_LSFT | MOD_RSFT), 0)
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
  &kp Q         &kp W          &kp F         &kp P          &kp G                            &kp J         &kp L           &kp U           &kp Y           &kp SEMI
  &hrm_l LALT A &hrm_l LCTRL R &hrm_l LGUI S &hrm_l LSHFT T &kp D                            &kp H         &hrm_r RSHFT N  &hrm_r RGUI E   &hrm_r RCTRL I  &hrm_r RALT O
  &kp Z         &kp X          &kp C         &kp V          &kp B                            &kp K         &kp M           &kp COMMA       &kp DOT         &kp FSLH
                                             &lt NAV TAB    &lt SYM RET  &gresc    &kp EQUAL &lt FN SPACE  &bspc_del
            >;
        };

        FN {
            bindings = <
  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5     &kp PLUS &kp N7  &kp N8  &kp N9  ___   
  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10    &kp N0   &kp N4  &kp N5  &kp N6  ___   
  &kp F11  &kp F12  ___     ___     ___        ___      &kp N1  &kp N2  &kp N3  ___   
                    ___     ___     ___        ___      ___     ___   
            >;
        };

        SYM {
            bindings = <
  ___           &kp LS(UNDER)  &kp MINUS      &kp EQUAL     ___              &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)
  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    ___            &kp SQT       &kp BSLH      &kp LBKT      &kp RBKT
  &kp GRAVE     ___            ___            ___           ___              ___            &kp LS(DQT)   &kp LS(PIPE)  &kp LS(LBRC)  &kp LS(RBRC)
                               ___            ___           ___              ___            ___           ___   
            >;
        };

        NAV {
            bindings = <
  ___  ___  ___  ___  ___           ___  ___       ___       ___        ___
  ___  ___  ___  ___  ___           ___  ___       &kp UP    ___        ___
  ___  ___  ___  ___  ___           ___  &kp LEFT  &kp DOWN  &kp RIGHT  ___
                 ___  ___  ___  ___ ___  ___   
            >;
        };
    };
};

/* vim: set filetype=devicetree commentstring=//\ %s: */
